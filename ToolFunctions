def calculateAP(data_):
    '''
    This function is used for calculate AP0.5.
    :param data_: [[gt_bbox, dt_bbox, dt_score], ] # gt, dt are numpy array
    :return: print AP0.5 and save pr_array.npy for PR curve.
    '''
    import torch
    import torch.utils.data as data
    from torch.utils.data import Dataset
    class Dataset_(Dataset):
        def __init__(self, data):
            self.data = data

        def __len__(self):
            return len(self.data)

        def __getitem__(self, idx):

            gt_boxes, dt_boxes, scores= self.data[idx]
            target = {}
            target['boxes'] = torch.from_numpy(gt_boxes)
            target['labels'] = torch.ones([gt_boxes.shape[0]])
            target['image_id'] = torch.tensor([idx])
            target['area'] = torch.from_numpy((gt_boxes[:, 3] - gt_boxes[:, 1]) * (gt_boxes[:, 2] - gt_boxes[:, 0]))
            target['iscrowd'] = iscrowd = torch.zeros([gt_boxes.shape[0]])

            img = torch.zeros([3, 720, 1280])

            pred = {}
            pred['boxes'] = torch.from_numpy(dt_boxes)
            pred['labels'] = torch.ones([dt_boxes.shape[0]])
            pred['scores'] = torch.from_numpy(scores)

            return img, target, pred

    def collate_fn(batch):
        return tuple(zip(*batch))

    dataset = Dataset_(data_)
    data_loader = data.DataLoader(
        dataset, batch_size=1, shuffle=False, num_workers=4, collate_fn=collate_fn
    )

    from lib.utils.coco_utils import get_coco_api_from_dataset
    from lib.utils.coco_eval import CocoEvaluator
    coco = get_coco_api_from_dataset(data_loader.dataset)
    iou_types = ['bbox']
    coco_evaluator = CocoEvaluator(coco, iou_types)
    for img, targets, preds in data_loader:
        targets = [{k: v.to('cpu') for k, v in t.items()} for t in targets]
        outputs = [{k: v.to('cpu') for k, v in t.items()} for t in preds]
        res = {target["image_id"].item(): output for target, output in zip(targets, outputs)}
        coco_evaluator.update(res)
    coco_evaluator.synchronize_between_processes()
    coco_evaluator.accumulate()
    AP_iou05 = coco_evaluator.summarize()
    pr_array1 = coco_evaluator.coco_eval['bbox'].eval['precision'][0, :, 0, 0, 2]
    import numpy as np
    x = np.arange(0.0, 1.01, 0.01)
    pr = [pr_array1, x]
    np.save('pr_array.npy', pr)
